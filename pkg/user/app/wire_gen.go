// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"ddd-example/pkg/user/app/adapter"
	"ddd-example/pkg/user/app/handler"
	"ddd-example/pkg/user/app/service"
	"ddd-example/pkg/user/infra"
	"github.com/google/wire"
	"github.com/jmoiron/sqlx"
	"github.com/joyparty/entity"
)

// Injectors from wire.go:

func initRepositories(dbi entity.DB) Repositories {
	userDBRepository := infra.NewUserDBRepository(dbi)
	repositories := Repositories{
		Users: userDBRepository,
	}
	return repositories
}

func initHandlers(db *sqlx.DB, dbi entity.DB, cache adapter.Cacher) Handlers {
	userDBRepository := infra.NewUserDBRepository(dbi)
	changePasswordHandler := &handler.ChangePasswordHandler{
		User: userDBRepository,
	}
	sessionTokenService := &service.SessionTokenService{
		Users: userDBRepository,
	}
	userService := &service.UserService{
		Users: userDBRepository,
	}
	loginWithEmailHandler := &handler.LoginWithEmailHandler{
		Session: sessionTokenService,
		Users:   userService,
	}
	logoutHandler := &handler.LogoutHandler{
		Session: sessionTokenService,
	}
	registerHandler := &handler.RegisterHandler{
		Session: sessionTokenService,
		Users:   userService,
	}
	oauthTokenService := &service.OauthTokenService{
		Cache: cache,
	}
	registerWithOauthHandler := &handler.RegisterWithOauthHandler{
		DB:         db,
		Session:    sessionTokenService,
		OauthToken: oauthTokenService,
	}
	renewSessionTokenHandler := &handler.RenewSessionTokenHandler{
		Session: sessionTokenService,
	}
	retrieveSessionTokenHandler := &handler.RetrieveSessionTokenHandler{
		Session: sessionTokenService,
	}
	oauthDBRepository := infra.NewOauthDBRepository(dbi)
	oauthUserService := &service.OauthUserService{
		Users: userDBRepository,
		Oauth: oauthDBRepository,
	}
	verifyOauthHandler := &handler.VerifyOauthHandler{
		OauthUser:  oauthUserService,
		OauthToken: oauthTokenService,
		Session:    sessionTokenService,
	}
	handlers := Handlers{
		ChangePassword:       changePasswordHandler,
		LoginWithEmail:       loginWithEmailHandler,
		Logout:               logoutHandler,
		Register:             registerHandler,
		RegisterWithOauth:    registerWithOauthHandler,
		RenewSessionToken:    renewSessionTokenHandler,
		RetrieveSessionToken: retrieveSessionTokenHandler,
		VerifyOauth:          verifyOauthHandler,
	}
	return handlers
}

// wire.go:

var (
	repositoriesSet = wire.NewSet(wire.NewSet(infra.NewUserDBRepository, wire.Bind(new(adapter.UserRepository), new(*infra.UserDBRepository))), wire.NewSet(infra.NewOauthDBRepository, wire.Bind(new(adapter.OauthRepository), new(*infra.OauthDBRepository))),
	)

	serviceSet = wire.NewSet(wire.Struct(new(service.OauthUserService), "*"), wire.Struct(new(service.OauthTokenService), "*"), wire.Struct(new(service.SessionTokenService), "*"), wire.Struct(new(service.UserService), "*"))

	repositoriesProvider = wire.NewSet(
		repositoriesSet, wire.Struct(new(Repositories), "*"),
	)

	handlersProvider = wire.NewSet(
		repositoriesSet,
		serviceSet, wire.Struct(new(handler.ChangePasswordHandler), "*"), wire.Struct(new(handler.LoginWithEmailHandler), "*"), wire.Struct(new(handler.LogoutHandler), "*"), wire.Struct(new(handler.RegisterHandler), "*"), wire.Struct(new(handler.RegisterWithOauthHandler), "*"), wire.Struct(new(handler.RenewSessionTokenHandler), "*"), wire.Struct(new(handler.RetrieveSessionTokenHandler), "*"), wire.Struct(new(handler.VerifyOauthHandler), "*"), wire.Struct(new(Handlers), "*"),
	)
)
